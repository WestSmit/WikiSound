@page "/login";
@using WikiSound.Client.Services;
@using WikiSound.Shared.Auth;
@inject IAuthService Auth;
@inject NavigationManager Navigation;

<PageTitle>Login</PageTitle>
<div class="h1 text-center">Log in</div>
<EditForm Model="authRequest" OnValidSubmit="Login" 
    class="col-11 col-sm-8 col-md-6 col-lg-4 col-xl-2 m-auto text-light p-3 shadow border-bottom bg-light bg-opacity-10 rounded">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="Email" class="form-label">Email address</label>
        <InputText @bind-Value="@authRequest.Email" type="email" class="form-control border-0" id="Email" aria-describedby="emailHelp"></InputText>
        <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
        <ValidationMessage For="() => authRequest.Email" class="small text-danger"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="Password" class="form-label">Password</label>
        <InputText @bind-Value="authRequest.Password" type="password" class="form-control border-0" id="Password" min="6"></InputText>
        <ValidationMessage For="() => authRequest.Password" class="small text-danger"></ValidationMessage>
    </div>
    <button type="submit" class="btn btn-success d-block m-auto">Submit</button>
    @foreach (var error in @errors)
    {
        <div class="text-danger m-2">@error.Key
            @foreach (var message in @error.Value)
            {
                <div class="small m-1">@message</div>
            }
        </div>
    }
</EditForm>

@code {
    private AuthRequest authRequest = new();
    private Dictionary<string, string[]> errors = new Dictionary<string, string[]>();

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();

    }

    private async Task Login()
    {
        var res = await Auth.LoginAsync(authRequest);
        if (res.Succeeded && res.Errors.Count == 0)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            errors = res.Errors;
        }
    }

}